1일차
 - 조명 선정: 다섯플릭스
 - 조장 선정: 최병철
 - 주제 선정: OTT System 프로그램 만들기(Netflix만들기)
 baejyael@nate.com
2일차
 - 프로그램 큰 그림 그리기: OTT System의 구성 분석 회의
 - 클래스 다이어그램 초안: 클래스이름과 상관관계 분석 회의
 - 코딩 시작: 각 조원별로 코딩을 시작(중간 병합 예정)
	
3일차
 - 코딩: 사용자 부분과 영상물 부분 세부코딩 및 전체 흐름 코딩
 
4일차
 - 코딩: ing
 - ppt: 초안 작성
 - 클래스 다이어그램: 최신내용으로 업데이트
 
 ※※※※ 멘붕 ※※※※
 회원가입 로직을 구현할때 User클래스가 생성되면서 내부적으로 Profile 객체를 인스턴스화 하고 HashSet에 저장한 후 Profile의 멤버변수 값들을 설정하였다
 로그인 후 새로운 Profile을 생성하여 HashSet에 저장하는데 회원가입할때 생성했던 Profile 객체와 동일한 key값을 가지는 객체를 저장하였음에도
 중복으로 저장이 되는 현상이 발생하여 내가 의도한바와 다르게 버그가 난무하는 상황이 발생하였다.
 HashSet에 저장될 때 오버라이딩 해두었던 equals와 hashcode를 호출하여 매번 값들을 비교해줄 것이라고 생각하여 구현한 로직이였다.
 하지만 결과는 달랐고 강사님께 문의한 결과 HashSet은 HashMap을 가지고 있고 HashMap에 저장되는 순간 HashCode가 생성된다.
 이후에 값을 변경하면 객체의 HashCode는 같아지지만 HashMap내부에 있는 HashCode는 변경이 되지 않고 다른 상태로 유지된다.
 그래서 저장하면 HashSet에 저장이 되므로 되도록이면 Key값은 수정하지 말자는 교훈을 얻을 수 있었다.



JAVA MINI PROJECT 후기

- 소감
 프로젝트 주제에 맞게 기능을 분석하고 구현할때 객체지향적인 코드를 작성하면 수정 및 유지보수가 용이하다는 것을 직접 경험으로 느낄 수 있었다.
 수업시간에 싱글톤에 대해서 배울때는 이 기능의 유용함을 잘 이해하지 못했으나 이번 프로젝트를 통하여 객체와 객체의 관계를 정의하고 각 각체의 멤버변수의 값과 메서드를
 컨트롤 하는 클래스를 싱글톤으로 하지 않았다면 정보를 처리하는 것이 얼마나 복잡하고 어려웠을지를 다시 한번 깨닫는 좋은 계기가 되었다.

- 문제 원인(회원가입 로직)
 User클래스가 생성되면서 내부적으로 Profile 객체를 인스턴스화 하고 HashSet에 저장한 후 Profile의 멤버변수 값들을 설정
 
- 문제 발생
 로그인 후 새로운 Profile을 생성하여 HashSet에 저장하는데 회원가입할때 생성했던 Profile 객체와 동일한 key값(nickname)을 가지는 객체를 저장하였음에도
 중복으로 저장이 되는 현상이 발생
 
- 문제 원인 분석
 HashSet에 저장될 때 오버라이딩 해두었던 equals와 hashcode를 호출하여 매번 값들을 비교해줄 것이라고 생각하여 구현한 로직이였다.
 하지만 결과는 달랐고 강사님께 문의한 결과 HashSet은 HashMap을 가지고 있고 HashMap에 저장되는 순간 HashCode가 생성된다.
 이후에 값을 변경하면 객체의 HashCode는 같아지지만 HashMap내부에 있는 HashCode는 변경이 되지 않고 다른 상태로 유지된다.
 그래서 저장하면 HashSet에 저장이 되므로 되도록이면 Key값은 수정하지 말자는 교훈을 얻을 수 있었다.
 
- 문제 해결
 Profile 객체를 인스턴스화 하고 멤버변수에 값을 설정한 후 HashSet에 add 하고 HashSet에 add된 정보는 key값을 수정하지 않도록 하였다.
 꼭 변경해야 할 상황에서는 해당 객체를 HashSet에서 remove하고 값을 변경 후 다시 add 하는 방식으로 변경하였다.

- 협업 하면서 느낀점
 각 조원들이 개발환경이 달라서 소스 파일을 공유하면서 한글과 이모티콘부분이 깨지는 현상이 자주 발생되어 불편하였다.
 협업을 시작할때 개발환경을 동일하게 구축하여 시작하는 것의 중요함을 깨달을 수 있었다.